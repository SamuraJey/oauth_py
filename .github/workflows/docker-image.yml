name: Build and Push Docker Image, then Deploy to my server

on:
    push:
        branches:
            - '*'
env:
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.repository }}
    HOST: ${{ secrets.SSH_HOST }}
    SSH_USER: ${{ secrets.SSH_USER }}
    PORT: ${{ secrets.SSH_PORT }}

    DOT_ENV: ${{ secrets.DOT_ENV }}

jobs:
    build:
        name: Build
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Log in to the Container registry
              uses: docker/login-action@v3
              with:
                registry: ${{ env.REGISTRY }}
                username: ${{ github.actor }}
                password: ${{ secrets.GITHUB_TOKEN }}
      
            - name: Extract metadata (tags, labels) for Docker
              id: meta
              uses: docker/metadata-action@v5
              with:
                images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            
            - name: Build and push Docker image
              uses: docker/build-push-action@v6
              with:
                context: .
                push: true
                tags: ${{ steps.meta.outputs.tags }}
                labels: ${{ steps.meta.outputs.labels }}
    deploy:
        name: Deploy
        runs-on: ubuntu-latest
        needs: [build]

        steps:
        - uses: actions/checkout@v4
        - name: install ssh keys
          # check this thread to understand why its needed:
          # <https://stackoverflow.com/a/70447517>
          run: |
            install -m 600 -D /dev/null ~/.ssh/id_rsa
            echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
            ssh-keyscan -p ${{ env.PORT }} -H ${{ env.HOST }} > ~/.ssh/known_hosts
        - name: create dotenv
          run: echo "${{ env.DOT_ENV }}" | base64 --decode > .env
        - name: copy dotenv file
          run: scp -P ${{ env.PORT }} .env ${{ env.SSH_USER }}@${{ env.HOST }}:.env
        - name: connect and pull
          run: ssh ${{ env.SSH_USER }}@${{ env.HOST }} -p ${{ env.PORT }} "docker compose pull && docker compose up -d && exit"
        - name: cleanup keys
          if: always()
          run: rm -rf ~/.ssh .env
